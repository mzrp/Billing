@model IEnumerable<TeleBilling_v02_.Models.DisplayModels.AgreementZoneRecords>

@{
    string sBulkValue = "";
    try
    {
        if (System.Web.HttpContext.Current.Session["sesBulkCallRPValue"] != null)
        {
            sBulkValue = System.Web.HttpContext.Current.Session["sesBulkCallRPValue"].ToString();
        }
    }
    catch (Exception ex)
    {
        sBulkValue = ex.ToString();
    }

    int agreementId = -1;
    if (System.Web.HttpContext.Current.Session["sesAgreementId"] != null)
    {
        agreementId = Convert.ToInt32(System.Web.HttpContext.Current.Session["sesAgreementId"]);
    }

    string sToday = DateTime.Now.Day.ToString().PadLeft(2, '0') + DateTime.Now.Month.ToString().PadLeft(2, '0') + DateTime.Now.Year.ToString().PadLeft(4, '0');
    string sHtmlToPdf = "<span style='font-size:24px;'><b>" + Model.ElementAt(0).Customer_name + "</b></span><br />pricelist date: " + sToday + "<br />&nbsp;</p>";
    sHtmlToPdf += "<table width='500px' style='page-break-inside: avoid;'><tr><td><b>Country code</b></td><td><b>Name</b></td><td><b>Call price</b></td><td><b>Min price</b></td></tr>";
    string sPDFFilePath = AppDomain.CurrentDomain.BaseDirectory + "upload\\" + Model.ElementAt(0).Customer_cvr + "_Pricelist_" + sToday + ".pdf";
    string sPDFFileName = Model.ElementAt(0).Customer_cvr + "_Pricelist_" + sToday + ".pdf";
}

    <table class="table">

        <tr>
            <td>
                &nbsp;
            </td>
            <td>
                &nbsp;
            </td>
            <td>
                &nbsp;
            </td>
            <td>
                &nbsp;
            </td>
            <td>
                @using (Html.BeginForm("ViewZoneDetails", "Agreement", FormMethod.Post))
                {
                    @Html.Label("Set new bulk value:")
                    <br />
                    @Html.TextBox("NewBulkCallPriceRP", sBulkValue, new { htmlAttributes = new { @class = "form-control" } })
                    <br />
                    <input type="submit" style="margin-top:3px; padding-top:3px;" class="btn btn-info btn-sm" value="New Call_price_RP" />
                }
            </td>
            <td>
                &nbsp;
            </td>
            <td>
                &nbsp;
            </td>
        </tr>

        <tr>
            <td>
                <b>
                    @Html.DisplayName("Country code")
                </b>
            </td>
            <td>
                <b>
                    @Html.DisplayNameFor(model => model.Name)
                </b>
            </td>
            <td>
                <b>
                    @Html.DisplayName("Call price Supplier")
                </b>
            </td>
            <td>
                <b>
                    @Html.DisplayName("Min price Supplier")
                </b>
            </td>
            <td>
                <b>
                    @Html.DisplayName("Call price RP")
                </b>
            </td>
            <td>
                <b>
                    @Html.DisplayName("Min price RP")
                </b>
            </td>
            <td>
                &nbsp;
            </td>
        </tr>

        @foreach (var item in Model)
        {
            sHtmlToPdf += "<tr><td>" + item.Country_code + "</td><td>" + item.Name + "</td><td>" + item.Call_price_RP + "</td><td>" + item.Minute_price_RP + "</td></tr>";
            <tr>
                <td style="page-break-inside: avoid;">
                    @Html.DisplayFor(modelItem => item.Country_code)
                </td>
                <td style="page-break-inside: avoid;">
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td style="page-break-inside: avoid;">
                    @Html.DisplayFor(modelItem => item.Call_price_Supplier)
                </td>
                <td style="page-break-inside: avoid;">
                    @Html.DisplayFor(modelItem => item.Minute_price_Supplier)
                </td>
                <td style="page-break-inside: avoid;">
                    @Html.EditorFor(modelItem => item.Call_price_RP, new { htmlAttributes = new { @class = "form-control" } })
                </td>
                <td style="page-break-inside: avoid;">
                    @Html.EditorFor(modelItem => item.Minute_price_RP, new { htmlAttributes = new { @class = "form-control" } })
                </td>
                <td style="page-break-inside: avoid;">
                    <a href="@Url.Action("ViewDetails", "Agreement", new { itemid = item.Id, agreementId = agreementId })" class="btn btn-info btn-sm">Update <i class="glyphicon glyphicon-edit "></i></a>
                </td>
            </tr>
        }

        <tr>
            <td colspan="7"  style="page-break-inside: avoid;">
                <a href="https://billing.gowingu.net/TeleBilling(v02)/upload/@sPDFFileName" target="_blank">download pricelist</a>
            </td>
        </tr>

    </table>

@{ 
    try
    {
        sHtmlToPdf += "</table>";

        PdfSharp.Pdf.PdfDocument pdf = TheArtOfDev.HtmlRenderer.PdfSharp.PdfGenerator.GeneratePdf(sHtmlToPdf, PdfSharp.PageSize.A4);
        pdf.Save(sPDFFilePath);
    }
    catch (Exception ex)
    {
        ex.ToString();
    }
}
